import os
import numpy as np
from matchingfiles import *
from PIL import Image, ImageChops, ImageFilter
import itertools
import random
from skimage import morphology, measure
from txt import *

def open_image(image):
    """Applique une ouverture (érosion suivie d'une dilatation) pour réduire le bruit."""
    # Convertir l'image en niveaux de gris
    gray_image = image.convert("L")
    
    # Convertir l'image en tableau numpy
    image_array = np.array(gray_image)
    
    # Binariser l'image (ajuster le seuil selon les besoins)
    binary_image = image_array > 128
    
    # Appliquer l'ouverture (érosion suivie d'une dilatation)
    opened_image = morphology.binary_opening(binary_image, morphology.square(3))
    
    # Supprimer les petits objets en dessous d'une certaine taille (e.g., taille < 64 pixels)
    cleaned_image = morphology.remove_small_objects(opened_image, min_size=64)
    
    # Convertir le résultat en image PIL
    return Image.fromarray(cleaned_image.astype(np.uint8) * 255)

def trim_image(image):
    """Recadre les espaces blancs ou transparents autour de l'image après traitement."""
    # Appliquer un filtre médian plus agressif pour réduire le bruit
    filtered_image = image.filter(ImageFilter.MedianFilter(size=5))  # Taille de 5 pour un filtrage plus fort
    
    # Appliquer l'ouverture (combinaison d'érosion et dilatation)
    processed_image = open_image(filtered_image)

    # Convertir l'image filtrée en mode 'L' (niveaux de gris) et obtenir son masque
    bg = Image.new(processed_image.mode, processed_image.size, processed_image.getpixel((0, 0)))  # Pixel de fond (0, 0)
    diff = ImageChops.difference(processed_image, bg)
    diff = ImageChops.add(diff, diff, 2.0, -100)
    bbox = diff.getbbox()

    if bbox:
        return processed_image.crop(bbox)
    return processed_image  # Retourner l'image non modifiée si aucune bordure trouvée

def resize_image(image, target_size=(128, 32)):
    """Redimensionne l'image à une taille fixe donnée."""
    return image.resize(target_size, Image.LANCZOS)

def concat_images(images, output_path):
    """Concatène les images données en une seule image et les sauvegarde à output_path."""
    opened_images = [Image.open(img) for img in images]

    # Recadrer les images pour enlever les bordures blanches ou transparentes après traitement
    trimmed_images = [trim_image(image) for image in opened_images]

    # Redimensionner toutes les images à 128x32
    resized_images = [resize_image(trim_image(image)) for image in trimmed_images]

    # Créer une nouvelle image ayant la largeur totale et la hauteur de 32
    combined_image = Image.new('RGB', (128, 32))

    # Coller chaque image l'une à côté de l'autre, sans espace
    x_offset = 0
    for img in resized_images:
        combined_image.paste(img, (x_offset, 0))
        x_offset += img.width

    # Sauvegarder l'image combinée
    combined_image.save(output_path)
    print(f"Image combinée sauvegardée à {output_path}")


def automate_image_combination():
    matching_files, search_inputs = main()

    # Transformer le dictionnaire en une liste de listes
    lists_of_files = [matching_files[term] for term in matching_files]

    # Vérifier si au moins deux dossiers contiennent des images
    if len(lists_of_files) < 2:
        print("Erreur : Au moins deux dossiers avec des images sont nécessaires.")
        return

    # Générer toutes les combinaisons possibles
    all_combinations = list(itertools.product(*lists_of_files))

    # Limiter à 100 combinaisons aléatoires si plus de 100 sont générées
    if len(all_combinations) > 100:
        selected_combinations = random.sample(all_combinations, 100)
    else:
        selected_combinations = all_combinations

    output_dir = get_output_path(search_inputs)

    counter = 1

    for combination in selected_combinations:
        images_to_concat = list(combination)
        output_file_name = f"combined_image_{''.join(search_inputs)}_{counter}.png"
        counter += 1

        output_path = os.path.join(output_dir, output_file_name)
        concat_images(images_to_concat, output_path)
    main_txt(search_inputs)

# Exécuter l'automatisation
automate_image_combination()


